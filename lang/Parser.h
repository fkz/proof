// Generated by Bisonc++ V2.09.03 on Wed, 16 Nov 2011 16:57:05 +0100

#ifndef Parser_h_included
#define Parser_h_included

#include "semantic.h"
#include "Parserbase.h"
#include "kern/element_ptr.h"
#include "kern/element_ptr.ext.h"


#undef Parser
class Parser: public ParserBase
{
        
    public:
      Parser (std::istream &str) : stream (str), lex_front(0) { };  
      
      int parse();
      ElementPtr buildForAlls(ElementPtr &vars, ElementPtr &aussage);
      ElementPtr buildFunctions(ElementPtr &vars, ElementPtr &aussage);
      ElementPtr evaluate (const std::string &string);

    private:
      std::map< std::string, ElementPtr > eles;
      int lex_front;
      std::istream &stream;
      std::string literal (ElementPtr ptr);
      
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
	void setLiteral(std::string arg1);
};

inline void Parser::error(char const *msg)
{
    std::cerr << msg << '\n';
}

// $insert print
inline void Parser::print()
{}

#endif
